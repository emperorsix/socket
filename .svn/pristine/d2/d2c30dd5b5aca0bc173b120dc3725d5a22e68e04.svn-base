package com.zhangxuan.net.socket.access;

import java.util.Hashtable;

import com.zhangxuan.net.socket.model.Frame;

public abstract class Server implements IServer {
	protected final String tag = this.getClass().getSimpleName();
	private ServerListener listener = null;
	private final Hashtable<String, IClient> clients = new Hashtable<>();

	protected void register(IClient client) {
		if (client == null)
			return;
		log("register", "ClientID : " + client.getId());
		synchronized (clients) {
			clients.put(client.getId(), client);
		}
	}

	protected void unregister(String clientId) {
		if (clientId == null)
			return;
		log("unregister", "ClientID : " + clientId);
		synchronized (clients) {
			clients.remove(clientId);
		}
	}

	protected IClient findClient(String clientId) {
		if (clientId == null)
			return null;
		IClient client = null;
		synchronized (clients) {
			client = clients.get(clientId);
		}
		return client;
	}

	protected Hashtable<String, IClient> getClients() {
		Hashtable<String, IClient> tmp = new Hashtable<String, IClient>();
		synchronized (clients) {
			tmp.putAll(clients);
		}
		return tmp;
	}

	@Override
	public void onConnected(IClient client) {
		log("onConnected", "Client connected " + client.getId());
		if (client instanceof AsyncTcpClient)
			register(client);
		if (listener != null)
			listener.onConnected(client);
	}

	@Override
	public void onDisconnected(IClient client) {
		if (client == null)
			return;
		log("onDisconnected", "Client disconnected " + client.getId());
		if (listener != null)
			listener.onDisconnected(client);
		unregister(client.getId());
	}

	@Override
	public void onFrameReceived(Frame frame) {
		log("onFrameRead", "Received " + frame.getClass().getSimpleName() + " frame.\tFrameID=" + frame.getId());
		if (listener != null)
			try {
				listener.onFrameReceived(frame);
			} catch (Exception e) {
				e.printStackTrace();
			}
	}

	@Override
	public void onFrameSent(String frameId) {
		log("onFrameSent", "Frame Sent " + frameId);
		if (listener != null)
			listener.onFrameSent(frameId);
	}

	protected void log(String method, String msg) {
		System.out.println(tag + " :: " + method + " : " + msg);
	}

	protected void setListener(ServerListener listener) {
		this.listener = listener;
	}

	protected synchronized ServerListener getListener() {
		return listener;
	}
}
